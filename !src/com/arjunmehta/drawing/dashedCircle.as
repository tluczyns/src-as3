package com.arjunmehta.drawing{		//dashedCircle Class for AS3 by Arjun Mehta - www.arjunmehta.net	import flash.display.MovieClip;	import flash.display.Graphics;	import flash.display.Shape;	import flash.display.LineScaleMode;	import flash.display.CapsStyle;	import flash.display.JointStyle;		//import leebrimelow's Arc class found at http://code.google.com/p/leebrimelow/source/browse/#svn/trunk/as3/com/theflashblog/drawing	import com.leebrimelow.drawing.Arc;	import flash.events.MouseEvent;	public class DashedCircle extends MovieClip {		private var dashArcLength:Number;		private var gapArcLength:Number;		private var sx:Number;		private var sy:Number;		private var circumference:Number;		//this "multiplier" thing is an attempt to make the curve render a bit better... but it doesn't really work so well... It's better than nothing.		private var multiplier:int=20;		private var circle:MovieClip = new MovieClip();		public function DashedCircle(radius:Number, thickness:Number, dashLength:Number, gapLength:Number, color:uint, autoSpace:Boolean) {			circle.cacheAsBitmap=true;			radius=radius*multiplier;			dashLength=dashLength*multiplier;			gapLength=gapLength*multiplier;			thickness=thickness*multiplier;			if (autoSpace==true) {				circumference=2*Math.PI*radius;				var howMany:int = circumference / (dashLength+gapLength);				var leftOverDivided:Number = (circumference % (dashLength+gapLength)) / howMany;				gapLength=leftOverDivided/2+gapLength;				dashLength=leftOverDivided/2+dashLength;			}			dashArcLength = (360*dashLength)/(2*Math.PI*radius);			gapArcLength = (360*gapLength)/(2*Math.PI*radius);			circle.graphics.lineStyle(thickness, color, 1, true, LineScaleMode.NORMAL, CapsStyle.ROUND, JointStyle.MITER, 10);			for (var i:Number=0; i<360; i=i+dashArcLength+gapArcLength) {				sx = radius*Math.cos( (i)*(Math.PI/180) );				sy = radius*Math.sin( (i)*(Math.PI/180) );				Arc.draw(circle, sx, sy, radius, dashArcLength, i);			}			circle.scaleX=1/multiplier;			circle.scaleY=1/multiplier;			addChild(circle);			this.addEventListener(MouseEvent.MOUSE_DOWN, drag);			this.addEventListener(MouseEvent.MOUSE_UP, drop);		}				private function drag(event:MouseEvent): void {			this.parent.setChildIndex(this, this.parent.numChildren - 1);			this.startDrag();		}		private function drop(event:MouseEvent): void {			this.stopDrag();		}			}}