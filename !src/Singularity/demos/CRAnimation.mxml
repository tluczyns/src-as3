<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" applicationComplete="test()" width="600" height="500">
  <mx:TextArea height="26" id="__status__" wordWrap="true" editable="false" top="10" left="23" right="22"/>
  <mx:Button x="113" y="468" label="Reset" id="__reset__" enabled="false" click="onReset()"/>
  <mx:Button x="23" y="468" label="Animate" id="__animate__" enabled="false" click="onAnimate()"/>
	
	<mx:Script>
    <![CDATA[
      import Singularity.Geom.CatmullRom;
      import Singularity.Numeric.Consts;
      import Singularity.Geom.Knot;
     
      import Singularity.Events.SingularityEvent;

      import Singularity.Interactive.PointSelector;
      
      import mx.core.UIComponent;
      
      import flash.display.Shape;
      import flash.display.Sprite;
      
      // catmull-rom spline (crs) namespace
      public namespace crs;
      
      crs var __spline:CatmullRom       = new CatmullRom();   // parametric spline reference
      crs var __count:uint              = 0;                  // count number of control points
      crs var __selected:uint           = 0;                  // index of selected control point
      crs var __knots:Array             = new Array();        // collection of Knot references
      crs var __control:Sprite          = new Sprite();       // animation control
      crs var __t:Number                = 0;                  // parameter value
      crs var __deltaT:Number           = 0;                  // increment
    
      public namespace ui;
      ui var __connect:Shape            = new Shape();        // lines connecting the control points
      ui var __curve:Shape              = new Shape();        // curve drawn in this Shape
      ui var __drawKnots:Sprite         = new Sprite();       // knots drawn here
      ui var __drawArea:PointSelector   = null;               // reference to point-selector
      ui var __myReference:UIComponent  = new UIComponent();  // UIComponent reference
      
      public function test():void 
      { 
      	addChild(ui::__myReference);
      	        
        crs::__spline.addEventListener(SingularityEvent.ERROR, errHandler);
        crs::__spline.container = ui::__curve;
        
        // define drawing area - use top of normal button for bottom level
        var drawX:uint = __status__.x;
        var drawY:uint = __status__.y + __status__.height + 5;
        var drawW:uint = __status__.width;
        var drawH:uint = __animate__.y - drawY - 10;
        
        ui::__drawArea = new PointSelector(drawX, drawY, drawW, drawH, 0xcccccc);
        ui::__drawArea.addEventListener(SingularityEvent.SELECTED, onSelected);
          
        ui::__myReference.addChild(ui::__drawArea);
        ui::__myReference.addChild(ui::__curve);
        ui::__myReference.addChild(ui::__connect);
        ui::__myReference.addChild(ui::__drawKnots);
        
        __status__.text = "Click in draw area to select at least three knots, then click 'Animate' ";
      }
      
      public function errHandler(_e:Event):void
      {
      	__status__.text = _e.toString();
      }
      
      public function onKnotRollOver(_e:Event):void
      {
        __status__.text = "Knot: " + _e.target.id;
      }
      
      public function onKnotRollOut(_e:SingularityEvent):void
      {
         __status__.text = "";
      }
      
      public function onKnotSelected(_e:Event):void
      {
        // no action taken
      }
      
      public function onSelected(_e:SingularityEvent):void
      {
      	var p:PointSelector = PointSelector(_e.target);
      	
      	var pX:uint = p.selectedX;
      	var pY:uint = p.selectedY;
      	                 
        var knot:Knot = new Knot(6, 0xffcccc);
        knot.addEventListener( SingularityEvent.ROLL_OVER, onKnotRollOver );
        knot.addEventListener( SingularityEvent.ROLL_OUT , onKnotRollOut  );
        knot.addEventListener( SingularityEvent.SELECTED , onKnotSelected );
        
        crs::__spline.addControlPoint(pX,pY);
        crs::__knots.push(knot);
        
        knot.id = crs::__count++;
        knot.x  = pX;
        knot.y  = pY;
        
        __animate__.enabled = crs::__count >= 3;
        
        ui::__drawKnots.addChild(knot);
      }
      
      public function onAnimate():void
      {
      	connectKnots();
      	
      	ui::__drawArea.disableXHair();
            
        __reset__.enabled   = true;
        __animate__.enabled = false;
        
        crs::__t      = 0;
        crs::__deltaT = 0.05;
        crs::__control.addEventListener(Event.ENTER_FRAME, animateCurve);
      }
      
      public function animateCurve(_e:Event):void
      {
      	crs::__spline.draw(crs::__t);
      	crs::__t += crs::__deltaT;
      	if( crs::__t >= 1.0 )
      	{
      	  crs::__spline.draw(1.0);
      	  crs::__control.removeEventListener(Event.ENTER_FRAME, animateCurve);
      	}
      }
      
      public function connectKnots():void
      {
      	var g:Graphics = ui::__connect.graphics;
      	g.clear();
      	g.lineStyle(0,0x000000);
      	var k:Knot = crs::__knots[0];
      	g.moveTo(k.x, k.y);
      	
      	for( var i:uint=1; i<crs::__count; ++i )
      	{
          k = crs::__knots[i];
      	  g.lineTo(k.x, k.y);
      	}
      }
      
      public function onReset():void
      {
      	// restore the application to its initial state, preparing for new control points
      	__reset__.enabled   = false;
      	__animate__.enabled = false;
      	
      	__status__.text = "Click in draw area to select at least three knots, then click 'Animate' ";
      	
        ui::__curve.graphics.clear();
        ui::__connect.graphics.clear();
        crs::__spline.reset();
        
        for( var i:uint=0; i<crs::__count; ++i )
          crs::__knots[i].destruct();
        
        crs::__knots.splice(0);
        crs::__count    = 0;
        crs::__selected = 0;
        
        ui::__drawArea.enableXHair();
      }
    ]]>
  </mx:Script>
	
</mx:Application>



