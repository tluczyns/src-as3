<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" applicationComplete="test()" width="600" height="500">
  <mx:TextArea height="26" id="__status__" wordWrap="true" editable="false" top="10" left="23" right="22"/>
  <mx:Button x="141" y="468" label="Move" id="__move__" enabled="false" click="onMove()"/>
  <mx:Button x="208" y="468" label="Reset" id="__reset__" enabled="false" click="onReset()"/>
  <mx:Button x="23" y="468" label="Draw" id="__draw__" enabled="true" click="onDraw()"/>
	
	<mx:Script>
    <![CDATA[
      import Singularity.Geom.PSpline3;
      import Singularity.Geom.Knot;
     
      import Singularity.Events.SingularityEvent;

      import Singularity.Interactive.PointSelector;
      
      import mx.core.UIComponent;
      
      import flash.display.Shape;
      
      // cubic parametric spline (ps3) namespace
      public namespace ps3;
      
      ps3 var NORMAL:String             = "N";
      ps3 var MOVE:String               = "M";
      
      ps3 var __mode:String             = ps3::NORMAL;        // current mode
      ps3 var __spline:PSpline3         = new PSpline3();     // parametric spline reference
      ps3 var __count:uint              = 0;                  // count number of control points
      ps3 var __selected:uint           = 0;                  // index of selected control point
      ps3 var __knots:Array             = new Array();        // collection of Knot references
      ps3 var __controlPoints:Array     = new Array();        // collection of control-point coordinates
      ps3 var __connect:Shape           = new Shape();        // lines connecting the control points
      ps3 var __curve:Shape             = new Shape();        // bezier curve drawn in this Shape
      ps3 var __drawArea:PointSelector  = null;               // reference to point-selector
      ps3 var __myReference:UIComponent = new UIComponent();  // UIComponent reference
      
      public function test():void 
      { 
      	addChild(ps3::__myReference);
      	        
        ps3::__spline.addEventListener(SingularityEvent.ERROR, errHandler);
        ps3::__spline.container = ps3::__curve;
        
        // define drawing area - use top of normal button for bottom level
        var drawX:uint = __status__.x;
        var drawY:uint = __status__.y + __status__.height + 5;
        var drawW:uint = __status__.width;
        var drawH:uint = __draw__.y - drawY - 10;
        
        ps3::__drawArea = new PointSelector(drawX, drawY, drawW, drawH, 0xcccccc);
        ps3::__drawArea.addEventListener(SingularityEvent.SELECTED, onSelected);
        
        ps3::__myReference.addChild(ps3::__drawArea);
        ps3::__myReference.addChild(ps3::__curve);
        ps3::__myReference.addChild(ps3::__connect);
        
        __status__.text = "Click in draw area to select knots, then click 'Draw' to plot draw the parametric spline";
      }
      
      public function errHandler(_e:Event):void
      {
      	__status__.text = _e.toString();
      }
      
      public function onKnotRollOver(_e:Event):void
      {
        __status__.text = "Knot: " + _e.target.id;
      }
      
      public function onKnotRollOut(_e:SingularityEvent):void
      {
      	if( ps3::__mode == ps3::NORMAL )
      	  __status__.text = "Parametric Cubic Spline drawn with selected control points.  Move control point or reset";
      	else if ( ps3::__mode == ps3::MOVE )
      	  __status__.text = "Selected control point: " + ps3::__selected + ".  Click in draw area to move control point";
      	else
      	  __status__.text = "";
      }
      
      public function onKnotSelected(_e:Event):void
      {
      	if( ps3::__mode == ps3::MOVE )
      	{
          __status__.text = "Selected control point: " + ps3::__selected + ".  Click in draw area to move control point";
      	  var k:Knot      = Knot(_e.target);
      	  ps3::__selected = k.id;

      	  ps3::__drawArea.enableXHair();
      	
      	  k.color(0xff0000);
      	}
      }
      
      public function onSelected(_e:SingularityEvent):void
      {
      	var p:PointSelector = PointSelector(_e.target);
      	
      	var pX:uint = p.selectedX;
      	var pY:uint = p.selectedY;
      	
      	// process move mode first
      	if( ps3::__mode == ps3::MOVE )
        {
          ps3::__drawArea.disableXHair();
              
          // move the control point and then update the curve based on previous mode
          ps3::__spline.moveControlPoint(ps3::__selected, pX, pY);
          var k:Knot    = ps3::__knots[ps3::__selected];
          var pt:Object = ps3::__controlPoints[ps3::__selected];
          pt.X          = pX;
          pt.Y          = pY;
          k.x           = pX;
          k.y           = pY;
          k.resetColor();
          
          connectKnots();
          
          ps3::__curve.graphics.clear();
          ps3::__spline.draw(1.0);
          ps3::__mode = ps3::NORMAL;
        }
        else
      	{                 
          var knot:Knot = new Knot(6, 0xffcccc);
          knot.addEventListener( SingularityEvent.ROLL_OVER, onKnotRollOver );
          knot.addEventListener( SingularityEvent.ROLL_OUT , onKnotRollOut  );
          knot.addEventListener( SingularityEvent.SELECTED , onKnotSelected );
        
          ps3::__spline.addControlPoint(pX,pY);
          ps3::__knots.push(knot);
        
          knot.id = ps3::__count++;
          knot.x  = pX;
          knot.y  = pY;
        
          ps3::__myReference.addChild(knot);
        
          // add point to knot collection
          ps3::__controlPoints.push( {X:pX, Y:pY} );
        }
      }
      
      public function onDraw():void
      {
      	connectKnots();
      	
      	ps3::__drawArea.disableXHair();
            
        ps3::__spline.draw(1.0);
            
        __move__.enabled   = true;
        __reset__.enabled  = true;
        __draw__.enabled   = false;
      }
      
      public function connectKnots():void
      {
      	var g:Graphics = ps3::__connect.graphics;
      	g.clear();
      	g.lineStyle(0,0x000000);
      	var p:Object = ps3::__controlPoints[0];
      	g.moveTo(p.X, p.Y);
      	
      	for( var i:uint=1; i<ps3::__count; ++i )
      	{
          p = ps3::__controlPoints[i];
      	  g.lineTo(p.X, p.Y);
      	}
      }
      
      public function onMove():void
      {
      	ps3::__mode = ps3::MOVE;
      	
      	__status__.text = "Move - Select control point.";
      }
      
      public function onReset():void
      {
      	// restore the application to its initial state, preparing for new control points
      	__move__.enabled  = false;
      	__reset__.enabled = false;
      	__draw__.enabled  = true;
      	
      	__status__.text = "Click in draw area to select knots, then click 'Draw' to plot draw the parametric spline";
      	
        ps3::__curve.graphics.clear();
        ps3::__connect.graphics.clear();
        ps3::__spline.reset();
        
        for( var i:uint=0; i<ps3::__count; ++i )
        {
          ps3::__knots[i].destruct();
          delete ps3::__knots[i];
          
          delete ps3::__controlPoints[i];
        }
        
        ps3::__controlPoints.splice(0);
        ps3::__knots.splice(0);
        
        ps3::__mode     = ps3::NORMAL;
        ps3::__count    = 0;
        ps3::__selected = 0;
        
        ps3::__drawArea.enableXHair();
      }
    ]]>
  </mx:Script>
	
</mx:Application>

